Goal: 
1.drive the robot
2.collect waypoints on the way
3.upon reaching destination
4.load waypoints and automatically return to original point

To do:
1. Gmapping
2. Move_base
3. Waypoint navigation

_______________________________________________GMAPPING_______________________________________________
 

Resources:
1. http://wiki.ros.org/gmapping
2. http://wiki.ros.org/amcl
3. http://wiki.ros.org/map_server

-For map to work, ensure transform trees are linked correctly. Map->Odom->base_link
-roslaunch gmapping slam_gmapping_pr2.launch
-If using simulation, set "sim_time" to "true".
-To use a static map, amcl package should be installed to help with map->odom tf, as well as better localisation.

Saving the map:
Once area is mapped, save the map by running
	cd ~/ (directory where you want to save map)
	rosrun map_server map_saver -f map_name

To load the map
	rosrun map_server map_server map_name.yaml
	rosrun map_server map_saver -f mymap
	roslaunch amcl amcl.launch 
	
	*note that the laser_scan msg has to be published to "scan". if not, remap (eg. <remap from="scan" to="base_scan_1" /> )


___________________________________move_base______________________________________________			
 
 
Resources:
1. http://wiki.ros.org/move_base
2. http://wiki.ros.org/costmap_2d

launch file:
<launch>
	<param name ="/use_sim_time" value="true"/>
  <node pkg="move_base" type="move_base" respawn="true" name="move_base" output="screen" > <!---->
		<remap from="scan" to="base_scan_1" />
    <rosparam file="$(find move_base)/params/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find move_base)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find move_base)/params/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find move_base)/params/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find move_base)/params/base_local_planner_params.yaml" command="load" />
    
  
    

    <param name="recovery_behavior_enabled" type="string" value="false"/>
		<param name="conservative_reset_dist" type="double" value="6.0" />
		<param name="controller_frequency" type="double" value="10.0" />
		<remap from="cmd_vel" to="cmd_vel"/>
    <remap from="odom" to="/odom"/>
    <remap from="scan" to="/base_scan_1"/>
  </node>
     
     
</launch>


**************************************

base_local_planner_params.yaml

TrajectoryPlannerROS:
  max_vel_x: 0.8
  min_vel_x: 0.1
  max_rotational_vel: 0.8
  min_in_place_vel_theta: 0.3
  escape_vel: -0.2

  sim_time: 2.0
  path_distance_bias: 0.6
  goal_distance_bias: 0.6

  acc_lim_th: 3.2
  acc_lim_x: 2.5
  acc_lim_y: 2.5

  holonomic_robot: false
  meter_scoring: true




*********************************************
costmap_common_params.yaml

//code//
...
observation_sources: base_scan_1

base_scan_1: {sensor_frame: laser_link, data_type: LaserScan, topic: scan, marking: true, clearing: true}


*note: the code above was crucial in ensuring that the error about the laserscan buffer not being received was solved. ensure observation source, topic:, and base_scan_1 is correct.


*********************************************



local_costmap_params.yaml

*change global_frame: to map
t


*********************************************
Cirkit Waypoint Package
1. Start stage setup

		roslaunch master stage.launch
		
		-localise the robot
		
2. Run cirkit generator to collect waypoints

		rosrun cirkit_waypoint_generator cirkit_waypoint_generator 
		
3. Drive the robot to desired destination with the generator running.
4. Once robot has reached,

		cd ~/catkin_ws/src/cirkit_waypoint_manager/cirkit_waypoint_generator
		rosrun cirkit_waypoint_generator cirkit_waypoint_saver
		
		
			4a. to view the waypoints saved,
		
			rosrun cirkit_waypoint_generator cirkit_waypoint_server load --/output_waypoints.csv
			
			4b. Click Waypoint_Markers topic in RVIZ to view.
			
5. Reversing the waypoints and navigating:

		Script to reverse the waypoints: csv_reverse.py
		Waypoints generated by cirkit: 	 waypoints_generated.csv
		reversed waypoints:							 waypoints_output.csv
		
		cd ~/catkin_ws/src/cirkit_waypoint_manager/cirkit_waypoint_generator
		roslaunch cirkit_waypoint_navigator waypoint_navigator.launch
		
*********************************************

Testing with saved maps.

1. Start stage setup

		roslaunch master stage.launch
		
		-localise the robot
		
2. Run gmapping

		roslaunch gmapping slam_gmapping_pr2.launch

3. Run cirkit generator to collect waypoints

		rosrun cirkit_waypoint_generator cirkit_waypoint_generator
		
3. Drive the robot to desired destination with the generator running.
4. Once robot has reached,

		cd ~/catkin_ws/src/cirkit_waypoint_manager/cirkit_waypoint_generator
		rosrun cirkit_waypoint_generator cirkit_waypoint_saver
		
5. Save the map

		cd src/slam_gmapping/gmapping
		rosrun map_server map_saver -f dmap
		
6. Kill the gmapping node. 
		rosnode kill /slam_gmapping
		
7. load map 
		
		rosrun map_server map_server dmap.pgm
		
8. 

current issues to solve: 
1. directories. Cannot seem to use $find with cirkit or with python files
2. sequencing. 
3. may not definitely reach the base due to some errors with the transforms etc. 


**********************************************************************************
SIMULTANEOUS MAPPING AND WAYPOINT COLLECTION.
The steps below are to run mapping, waypoint collection, and autonomous navigation (reversed path travelled). the user will drive the robot to desired destination, and the robot will automatically return back to origin by the path it reached there!

Testing with saved maps.

1. Start stage setup

		roslaunch master stage_mapping.launch
		
2. Run fake_localisation
		rosrun fake_localization fake_localization

3. Run cirkit generator to collect waypoints

		rosrun cirkit_waypoint_generator cirkit_waypoint_generator
		
3. Drive the robot to desired destination with the generator running.
4. Once robot has reached,

		cd ~/catkin_ws/src/cirkit_waypoint_manager/cirkit_waypoint_generator
		rosrun cirkit_waypoint_generator cirkit_waypoint_saver
		
5. Save the map

		cd ~/catkin_ws/src/slam_gmapping/gmapping
		rosrun map_server map_saver -f dmap
		
6. Kill the gmapping node. 
		rosnode kill /slam_gmapping
		
7. load map 
		
		rosrun map_server map_server dmap.pgm
		
8. Run AMCL Node
		roslaunch amcl amcl.launch
		
9. Run csv+navigation

		cd ~/catkin_ws/src/cirkit_waypoint_manager/cirkit_waypoint_generator
		roslaunch cirkit_waypoint_navigator waypoint_navigator.launch
		



	


